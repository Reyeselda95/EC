* Library of Miscellaneous Mixed Analog Models

* Copyright 1987-1995 by MicroSim Corporation
* Neither this library nor any part may be copied without the express
* written consent of MicroSim Corporation

* $Revision:   1.1  $
* $Author:   RPEREZ  $
* $Date:   06 Feb 1997 14:11:48  $

*---------------------------------------------------------------------------
*
* MicroSim Corporation would like to acknowledge Sandia National Laboratories
* for the contribution of their measurement-based model included in this 
* library.

*----------------------------------------------------------------------------


* Mixed a/d model for Cmos version of 555.
*  
* Notes from MicroSim: This model is not supported by the Basics+ package.
* The Delay Line model that this model uses is not supported by the Basics+
* package.
*
.subckt 555d 1 2 3 4 5 6 7 8 
+ params:maxfreq=3e6
  r1 8     5    150k
  r2 5     botm 150k
  r3 botm  1    150k
  m1 7 qb 1 1 nchan l=2u w=1000u
  otop 6     5  cmp dgtlnet=r io_std
  obot botm  2  cmp dgtlnet=s io_std
  ud1 dlyline 8 1 s sd dlymod io_std
  ud2 dlyline 8 1 r rd dlymod io_std
*  u1 srff(1) 8 1 strt 4 hi sd rd 3 qb t_srff io_555 
  u1 srff(1) 8 1 hi 4 hi sd rd 3 qb t_srff io_555 
  uhigh stim(1,1) 8 1  hi io_stm 0s 1
  ustrt stim(1,1) 8 1  strt io_stm 0s 0 1ns 1
.model nchan nmos cgbo=1p cgdo=1p cgso=1p 
.model dlymod udly(dlymn={.5/maxfreq}
+ dlyty={.5/maxfreq}
+ dlymx={0.5/maxfreq})
.model cmp doutput(
+ s0name=0 s0vlo=-500 s0vhi=0
+ s1name=1 s1vlo=   0 s1vhi=500)
.model io_555 uio (
+	drvh=96.4	drvl=104
+	atod1="atod_555"	atod2="atod_555"
+	atod3="atod_555"	atod4="atod_555"
+	dtoa1="dtoa_555"	dtoa2="dtoa_555"
+	dtoa3="dtoa_555"	dtoa4="dtoa_555")
.model t_srff ugff (tppcqlhty=120ns)
.ends
.subckt atod_555  a d  dpwr dgnd
+	params: capacitance=0
*
  o0  a dgnd do555 dgtlnet=d io_std
  c1  a 0 {capacitance+0.1pf}
.ends
.subckt dtoa_555  d a  dpwr dgnd
+	params: drvl=0 drvh=0 capacitance=0
*
  n1  a dgnd dpwr din555 dgtlnet=d io_std
  c1  a 0 {capacitance+.1pf}
.ends
.model din555 dinput (
+	s0name="0"	s0tsw=0.7ns	s0rlo=100	s0rhi=1meg
+	s1name="1"	s1tsw=0.7ns	s1rlo=1meg	s1rhi=300
+	s2name="x"	s2tsw=0.7ns	s2rlo=200	s2rhi=200
+	s3name="r"	s3tsw=0.7ns	s3rlo=200	s3rhi=200
+	s4name="f"	s4tsw=0.7ns	s4rlo=200	s4rhi=200
+	s5name="z"	s5tsw=0.7ns	s5rlo=200k	s5rhi=200k
+	)
.model DO555 doutput (
+	s0name="1"	s0vlo=0.4	s0vhi=18.0
+	s1name="0"	s1vlo=-1.5	s1vhi=0.4
+	)


* DIGITAL 555 TIMER CONNECTED IN ASTABLE OPERATION
*|.LIB MISC.LIB
*|.LIB DIG_IO.LIB
*|.PARAM CVAL=20N
*|VRST 4 0 PULSE(1 0 700U 1U 1U 400U 1)
*|C2 3 0 10P
*|VCC 8 0 5
*|RA 8 7 4700
*|RB 7 6 2200
*|C1 6 0 {CVAL}
*|X1 0 6 3 4 5 6 7 8 555D
*|CTRL 5 0 10P
*|.IC V(6)=0 
*|.TRAN 10U 800U
*|.PROBE
*|.END

*$
* End of 555d model


* Brushless Motor model
*
* This motor model uses equations from "Brushless Motor System Design and
* Analysis" by Dr. C.K. Taft et al, University of New Hampshire.  It is 
* discussed in the "Brussless DC Motor Model" Application Note.
*
* The Motor Subckt:
*
* We model a three phase motor.
* The model assumes that the magnetics are linear and loss-less.
*
* The voltage at node "shaft_speed" is the shaft speed (1Volt = 1 Rev/Sec).
* Additional inertia can be added as a capacitor from shaft_speed to ground.
* (2*pi farads = 1 g*cm*sec*sec)
* Additional torque loads can be added as a current from shaft_speed to 
* ground (a resistor represents a linear load). (1 amp = 1 g*cm)
*
* The voltage on node shaft_angle represents the shaft angle in radians
* (1 volt per radian).
*

.PARAM twopi = {8*atan(1)} ; a useful constant

* Motor connected in Wye configuration:
*
*       Phase 3 coil --------+
*       Phase 2 coil ----+   |
*       Phase 1 coil +   |   |
*                    |   |   |
.subckt bldcmtr_wye  p1  p2  p3  shaft_speed  shaft_angle
*
* The motor parameters:
*   Most of these are invented without any real knowledge
*   of what typical values are.  A "working" motor results, 
*   but it may not be very realistic.
*
+ params:
+	 J= .30   ; moment of inertia of rotor (g*cm*sec*sec)
+	 B= .36   ; Damping and eddy current losses (linear torque with speed)
*                   (g*cm*sec/rad)
+	 F= .72   ; Friction/drag losses (constant torque losses) (g*cm)
+	 D= 2.9   ; Magnetic detent torque (g*cm)
+	 A= 2     ; Number of north poles on the rotor
+	 P= 3     ; Number of phases (if you change this you need to add more
*                   windings to the motor subckt.)
+	 CL=3mh   ; winding inductance (Henrys)
+	 CR=6ohm  ; winding resistance (Ohms)
+	 CC=.001uf; winding capacitance to ground (Farads)
+	 CM=.5	  ; adjacent winding mutual coupling factor
+	 Cb=.12   ; Back EMF constant (Volt*sec/rev)
+	 Ct=300   ; Torque constant (g*cm/amp)

x1 p1 ct p2 ct p3 ct shaft_speed  shaft_angle        bldcmtr
+ params:J={J} B={B} F={F} D={D} A={A} CL={CL} CC={CC} Cb={Cb}

.ends

* The motor with both ends of each coil available.
* 
*   Phase 3 coil ----------------+---+
*   Phase 2 coil --------+---+   |   |
*   Phase 1 coil +---+   |   |   |   |
*                |   |   |   |   |   |
.subckt bldcmtr p1a p1b p2a p2b p3a p3b   shaft_speed  shaft_angle
*
* The motor parameters:
*   Most of these are invented without any real knowledge
*   of what typical values are.  A "working" motor results, 
*   but it may not be very realistic.
*
+ params:
+	 J= .30   ; moment of inertia of rotor (g*cm*sec*sec)
+	 B= .36   ; Damping and eddy current losses (linear torque with speed)
*                   (g*cm*sec/rad)
+	 F= .72   ; Friction/drag losses (constant torque losses) (g*cm)
+	 D= 2.9   ; Magnetic detent torque (g*cm)
+	 A= 2     ; Number of north poles on the rotor
+	 P= 3     ; Number of phases (if you change this you need to add more
*                   windings to the motor subckt.)
+	 CL=3mh   ; winding inductance (Henrys)
+	 CR=6ohm  ; winding resistance (Ohms)
+	 CC=.001uf; winding capacitance to ground (Farads)
+	 CM=.5	  ; adjacent winding mutual coupling factor
+	 Cb=.12   ; Back EMF constant (Volt*sec/rev)
+	 Ct=300   ; Torque constant (g*cm/amp)
+	 twopi = {8*atan(1)}

* Model each winding.  The inductor must be here so we can include
* mutual inductance.  The other effects are modeled in motor_winding
Lwinding1     p1a p1x {CL}
R_snub_1      p1a p1x {1Khz*twopi*CL} ; snubbing resistor to limit Q
x1         p1x p1b shaft_speed shaft_angle  motor_winding  params: N=1
+   A={A} P={P} CL={CL} CR={CR} CC={CC} CM={CM} Cb={Cb} Ct={Ct}

Lwinding2     p2a p2x  {CL}
R_snub_2      p2a p2x {1Khz*twopi*CL} ; snubbing resistor to limit Q
x2         p2x p2b shaft_speed shaft_angle  motor_winding  params: N=2
+   A={A} P={P} CL={CL} CR={CR} CC={CC} CM={CM} Cb={Cb} Ct={Ct}

Lwinding3     p3a p3x  {CL}
R_snub_3      p3a p3x {1Khz*twopi*CL} ; snubbing resistor to limit Q
x3         p3x p3b shaft_speed shaft_angle  motor_winding  params: N=3
+   A={A} P={P} CL={CL} CR={CR} CC={CC} CM={CM} Cb={Cb} Ct={Ct}

* Model the mutual inductance here.
* (For three phase, all windings are adjacent to each other.)
k1 Lwinding1 Lwinding2 {Cm}
k2 Lwinding2 Lwinding3 {Cm}
k3 Lwinding3 Lwinding1 {Cm}

* Model the motor mechanical system.
x4  shaft_speed  shaft_angle        motor_mech
+ params: J={J} B={B} F={F} D={D} A={A} P={P}

.ends


* The motor mechanical system:
*
* Torque is modeled as a current (1 amp = 1 g*cm).
* The voltage at shaft_speed is the speed (rev per sec) (1 volt = 1 Rev/sec).
* The voltage at shaft_angle is the shaft angle, in radians.
* 
.subckt motor_mech  shaft_speed  shaft_angle
+ params:
+	 J= .30   ; moment of inertia of rotor (g*cm*sec*sec)
+	 B= .36   ; Damping and eddy current losses (linear torque with speed)
*                   (g*cm*sec/rad)
+	 F= .72   ; Friction/drag losses (constant torque losses) (g*cm)
+	 D= 2.9   ; Magnetic detent torque (g*cm)
+	 A= 2     ; Number of north poles on the rotor
+	 P= 3     ; Number of phases (if you change this you need to add more
+	 twopi = {8*atan(1)}

*                   windings to the motor subckt.)

Cmotor  shaft_speed  0   {J*twopi}				; Inertia
Reddy   shaft_speed  0   {1/(B*twopi)}                         	; Linear losses
Gdrag   shaft_speed  ld1 VALUE = {F * V(drag)}               	; non-linear drag
Ldummy1 ld1     0   100mH                               	; force timestep control
Gdetent shaft_speed  ld2 VALUE = {D * sin(2*A*P*V(shaft_angle))}; Magnetic detent
Ldummy2 ld2     0   100mH                               	; force timestep control

* This table creates a voltage which is constant, and opposed to the 
* direction of rotation.  It has a small linear region close to zero 
* rotation speed.  This voltage is used in Gdrag above to make a non-linear 
* drag loss.
Edrag2  drag 0 TABLE {V(shaft_speed)} = (-.001, -1)   (.001, 1)
Rdummy1 drag 0 1

* This integrates the rotation into shaft angle, which used elsewhere
* in the model. 1 Volt = 1 Radian.
Gintegrate 0 shaft_angle_intg VALUE = {V(shaft_speed)}
Cintegrate 0 shaft_angle_intg {1/twopi} IC=0.0
Rdummy2    0 shaft_angle_intg 1e12 ; required to find bias point (otherwise floating)
Ecopy      shaft_angle 0 VALUE = {V(shaft_angle_intg)}	; Copy the voltage
Rdummy3    shaft_angle 0 1		; Make sure there is a load

.ends

*
* The motor winding 
*
* This models the electrical properties of the windings, and creates the
* torque "current" which is delivered to the mechanical model.
*
* Mutual inductance is modeled in the motor subcircuit, so the inductance
* must be there also.  The inductance must be in series with this model.

.subckt motor_winding winding1 winding2  shaft_speed shaft_angle 
+ params: N = 1 ; phase number
+	 A= 2     ; Number of north poles on the rotor
+	 P= 3     ; Number of phases (if you change this you need to add more
*                   windings to the motor subckt.)
+	 CL=3mh   ; winding inductance (Henrys)
+	 CR=6ohm  ; winding resistance (Ohms)
+	 CC=.001uf; winding capacitance to ground (Farads)
+	 CM=.5	  ; adjacent winding mutual coupling factor
+	 Cb=.12   ; Back EMF constant (Volt*sec/rev)
+	 Ct=300   ; Torque constant (g*cm/amp)
+	 twopi = {8*atan(1)}

* The electrical model: backemf, resistance, and capacitance
Ebackemf  winding1  3  VALUE = {Cb * V(shaft_speed) * V(factor) }
Vsense    3      4  0v          ; measure winding current
Rwinding     4  winding2  {CR}
* Place half the winding capacitance at each end of the winding.
C1   winding1  0  {CC/2}
C2   winding2  0  {CC/2}

* The mechanical model: torque created by this winding
Gtorque   0 shaft_speed VALUE = {Ct * I(Vsense) * V(factor) }

* The shaft angle function for this phase.
Efactor   factor 0 VALUE = {sin(A*V(shaft_angle) - (N-1)*(twopi/P))}
Cdummy    factor 0 10uf        ; force timestep control

.ends
*
* The following digital model is a digital decoder for the
* Windows Motor Driver Circuit
*
* DECOD -  DECODER/DEMULTIPLEXER 3-8 LINE
*
* THE FOLLOWING DIGITAL MODEL IS A MODIFIED VERSION OF THE 74LS138
*
.SUBCKT DECOD   G1_I G2ABAR_I G2BBAR_I A_I B_I C_I
+ Y0_O Y1_O Y2_O Y3_O Y4_O Y5_O Y6_O Y7_O
+ OPTIONAL: DPWR=$G_DPWR DGND=$G_DGND
+ PARAMS: MNTYMXDLY=0 IO_LEVEL=0
*
UDECODLOG LOGICEXP (6,15) DPWR DGND
+ G1_I G2ABAR_I G2BBAR_I A_I B_I C_I
+ G1   G2ABAR   G2BBAR   A   B   C   ENABLE
+ Y0 Y1 Y2 Y3 Y4 Y5 Y6 Y7
+ D0_GATE IO_LS
+ IO_LEVEL={IO_LEVEL}
+
+ LOGIC:
+   G1     = { G1_I }
+   G2ABAR = { G2ABAR_I }
+   G2BBAR = { G2BBAR_I }
+   A      = { A_I }
+   B      = { B_I }
+   C      = { C_I }
+   ABAR   = { ~A }
+   BBAR   = { ~B }
+   CBAR   = { ~C }
+   ENABLE = { ~G2ABAR & ~G2BBAR & G1 }
+   Y0     = { ~(ENABLE & CBAR & BBAR & ABAR) }
+   Y1     = { ~(ENABLE & CBAR & BBAR & A   ) }
+   Y2     = { ~(ENABLE & CBAR & B    & ABAR) }
+   Y3     = { ~(ENABLE & CBAR & B    & A   ) }
+   Y4     = { ~(ENABLE & C    & BBAR & ABAR) }
+   Y5     = { ~(ENABLE & C    & BBAR & A   ) }
+   Y6     = { ~(ENABLE & C    & B    & ABAR) }
+   Y7     = { ~(ENABLE & C    & B    & A   ) }
*
UDECODDLY PINDLY (8,0,7) DPWR DGND
+ Y0 Y1 Y2 Y3 Y4 Y5 Y6 Y7
+ ENABLE G1 G2ABAR G2BBAR A B C
+ Y0_O Y1_O Y2_O Y3_O Y4_O Y5_O Y6_O Y7_O
+ IO_LS
+ MNTYMXDLY={MNTYMXDLY} IO_LEVEL={IO_LEVEL}
+
+ BOOLEAN:
+   ABLE1 = { CHANGED(ENABLE,0) &  CHANGED(G1,0) }
+   ABLE2 = { CHANGED(ENABLE,0) & (CHANGED(G2ABAR,0) | CHANGED(G2BBAR,0)) }
+   ADDRA = { CHANGED(A,0) }
+   ADDRB = { CHANGED(B,0) }
+   ADDRC = { CHANGED(C,0) }
+   ADDR  = { CHANGED(A,0) | CHANGED(B,0) | CHANGED(C,0) }
+
+ PINDLY:
+   Y0_O = {
+       DELAY(-1,20NS,41NS)
+     }
+   Y1_O = {
+       DELAY(-1,21NS,41NS)
+     }
+   Y2_O = {
+       DELAY(-1,21NS,41NS)
+     }
+   Y3_O = {
+       DELAY(-1,21NS,41NS)
+     }
+   Y4_O = {
+       DELAY(-1,21NS,41NS)
+     }
+   Y5_O = {
+       DELAY(-1,21NS,41NS)
+     }
+   Y6_O = {
+       DELAY(-1,21NS,41NS)
+     }
+   Y7_O = {
+       DELAY(-1,21NS,41NS)
+     }
*
.ENDS

** A test circuit for the motor
*.param twopi = {2*3.141596}
*.param P = 3 ; the number of phases
*.param A = 2 ; the number of north poles on the rotor
*
** Connect one end of each phase winding to ct.
*x1 p1 ct p2 ct p3 ct Shaft_Speed Shaft_Angle bldcmtr
*+  params: J=.30 B=.36 F=.72 D=2.9 A={A} P={P} CL=3mh CR=6ohm CC=.1pf
*+  CM=.5 Cb=.12 Ct=300 twopi={twopi}
*rct ct 0 1 ; hook ct to ground through current measuring resistor
*
** Make some brushes
*Ep1x p1x  0  VALUE={V(on)*sin(A*V(Shaft_Angle) - (1-1)*(twopi/P))}
*Ep2x p2x  0  VALUE={V(on)*sin(A*V(Shaft_Angle) - (2-1)*(twopi/P))}
*Ep3x p3x  0  VALUE={V(on)*sin(A*V(Shaft_Angle) - (3-1)*(twopi/P))}
*r1  p1x 0 1
*r2  p2x 0 1
*r3  p3x 0 1
*S1p ppwr p1 p1x 0  switchp
*S1n npwr p1 p1x 0  switchn
*S2p ppwr p2 p2x 0  switchp
*S2n npwr p2 p2x 0  switchn
*S3p ppwr p3 p3x 0  switchp
*S3n npwr p3 p3x 0  switchn
*
** 5v to drive, 0v to brake
*Vppwr ppwr 0 PWL (0s,5v  .9s,5v  .901s,0v 2s,0v)
*Vnpwr npwr 0 PWL (0s,-5v .9s,-5v .901s,0v 2s,0v)
*
** Clamping diodes to keep the kickback voltage down
*D1p p1   ppwr dmod
*D1n npwr p1   dmod
*D2p p2   ppwr dmod
*D2n npwr p2   dmod
*D3p p3   ppwr dmod
*D3n npwr p3   dmod
*.model switchp vswitch (RON=.1 ROFF=1e5 VON= .86 VOFF= .84)
*.model switchn vswitch (RON=.1 ROFF=1e5 VON=-.86 VOFF=-.84)
*.model dmod D(RS=10)
** "on" is used to enable the "brushes"
**    0 disconnects brushes from power
**    1 connects brushes to power
*Von on 0 PWL (0,0 10ms,0 20ms,1 .8s,1 .81s,0 .9s,0 .91s,1)
*ron on 0 1
*.lib bldcmtr.lib
*.tran 10ms 2s
*.watch tran V([Shaft_Speed])
*.probe
*.end

* end of motor model
*$


.subckt RELAY_DPDT_BHV_BOUNCE coila coilb no1 nc1 com1 no2 nc2 com2
+ PARAMS:
+ T_make = 20mSec  ; Time for contact to close when current is turned off/on
+ T_break= 10mSec  ; Time for contact to open when current is turned off/on
+ T_bounce=5mSec   ; bounce time (after T_make)
+ I_pull = 35ma    ; Pull-in current
+ I_drop = 25ma    ; Drop-out current
+ R_coil = 100     ; Coil resistance
+ L_coil = 5mH     ; Coil inductance
+ R_open = 100MEG  ; open circuit contact resistance
+ R_close= .05     ; closed circuit contact resistance
+ Contact_match = .95 ; matching of contact make/break/bounce times: 1 = exact

* electrical model of coil
v_winding coila  a1     0
r_winding a1     a2     {R_coil}
l_winding a2     coilb  {L_coil}

* make a voltage from the current

e_cc  cc 0 value = {limit(I(v_winding),-3*I_pull,3*I_pull)}
r_cc  cc 0 1k

* use digital to create a switch with hysteresis

o_mag  cc 0 relay_1 DGTLNET=d digio_1
u_dly1 buf dpwr dgnd d cn_no1 relay_2a digio_1
u_inv1 inv dpwr dgnd d cn_nc1 relay_2a digio_1
u_dly2 buf dpwr dgnd d cn_no2 relay_2b digio_1
u_inv2 inv dpwr dgnd d cn_nc2 relay_2b digio_1
* model contact bounce with subckt
x_no1   cn_no1 com1 no1 RELAY_CONTACT_BOUNCE
+ PARAMS:
+ T_make =  {T_make}
+ T_break=  {T_break}
+ T_bounce= {T_bounce}
+ R_open =  {R_open}
+ R_close=  {R_close}
x_nc1   cn_nc1 com1 nc1 RELAY_CONTACT_BOUNCE
+ PARAMS:
+ T_make =  {T_make}
+ T_break=  {T_break}
+ T_bounce= {T_bounce}
+ R_open =  {R_open}
+ R_close=  {R_close}

x_no2   cn_no2 com2 no2 RELAY_CONTACT_BOUNCE
+ PARAMS:
+ T_make =  {T_make*Contact_match}
+ T_break=  {T_break*Contact_match}
+ T_bounce= {T_bounce*Contact_match}
+ R_open =  {R_open}
+ R_close=  {R_close}
x_nc2   cn_nc2 com2 nc2 RELAY_CONTACT_BOUNCE
+ PARAMS:
+ T_make =  {T_make*Contact_match}
+ T_break=  {T_break*Contact_match}
+ T_bounce= {T_bounce*Contact_match}
+ R_open =  {R_open}
+ R_close=  {R_close}


.model relay_1 doutput (
+ s0name="0" s0vlo={-I_pull}   s0vhi={I_pull}
+ s1name="1" s1vlo={I_drop}    s1vhi={4*I_pull}
+ s2name="1" s2vlo={-4*I_pull} s2vhi={-I_drop}
+ timestep={T_make/1000}
+ )
.model relay_2b ugate (
+ tphlmn={T_break*Contact_match}   tphlmx={T_break*Contact_match}
+ tplhmn={(T_make-0.126*T_bounce)*Contact_match} 
+ tplhmx={(T_make-0.126*T_bounce)*Contact_match}
+ )
.model relay_2a ugate (
+ tphlmn={T_break}   tphlmx={T_break}
+ tplhmn={(T_make-0.126*T_bounce)}
+ tplhmx={(T_make-0.126*T_bounce)}
+ )
.model digio_1 uio

.ends

.subckt RELAY_CONTACT_BOUNCE ctrl contact1 contact2
+ PARAMS:
+ T_make =  20mSec ; Time for contact to close when current is turned off/on
+ T_break=10mSec ; Time for contact to open when current is turned off/on
+ T_bounce= 5mSec  ; bounce time
+ R_open =  100MEG ; open circuit contact resistance
+ R_close=  .05    ; closed circuit contact resistance

* Simulate a fixed pattern of bounces.  Convert the digital ctrl (1=closed)
* into an analog signal which has a rise time of T_bounce. Use a table to
* convert this ramp into a "bounce" pattern. Then use an AtoD to square it 
* off.  Another DtoA makes the contact itself.

n_1 	c_a 0 1  relay_4 DGTLNET=ctrl digio_1
r_1  	c_a 0 1MEG
V1     	1 0 1
e_bounce c_b 0 TABLE {v(c_a)} = (.05,0 .1,.55 .2,0 .3,.6 .4,0 .5,.7 .6,0 .7,.8 .8,0 .9,1)
o_no   	c_b 0 relay_5 DGTLNET=c_1 digio_1
n_contact contact1 contact2 contact2 relay_3 DGTLNET=c_1 digio_1

.model relay_3 dinput (
+ s0name="0" s0tsw={T_make/1000} s0rlo={R_open*2}  s0rhi={R_open*2}
+ s1name="1" s1tsw={T_make/1000} s1rlo={R_close*2} s1rhi={R_close*2}
+ s2name="R" s2tsw={T_make/1000} s2rlo={R_open*2}  s2rhi={R_open*2}    
+ s3name="F" s3tsw={T_make/1000} s3rlo={R_open*2}  s3rhi={R_open*2}    
+ s4name="X" s4tsw={T_make/1000} s4rlo={R_open*2}  s4rhi={R_open*2}    
+ s5name="Z" s5tsw={T_make/1000} s5rlo={R_open*2}  s5rhi={R_open*2}    
+ )
.model relay_4 dinput (
+ s0name="0" s0tsw={T_make/1000} s0rlo=1  s0rhi=20
+ s1name="1" s1tsw={T_bounce/.665}    s1rlo=20 s1rhi=1
+ s2name="R" s2tsw={T_make/1000} s2rlo=1  s2rhi=20    
+ s3name="F" s3tsw={T_make/1000} s3rlo=1  s3rhi=20    
+ s4name="X" s4tsw={T_make/1000} s4rlo=1  s4rhi=20    
+ s5name="Z" s5tsw={T_make/1000} s5rlo=1  s5rhi=20    
+ )
.model relay_5 doutput (
+ s0name="0" s0vlo=-1   s0vhi=.5
+ s1name="1" s1vlo=.5   s1vhi=2
+ timestep={t_bounce/1000} )
.model digio_1 uio

.ends
*$
* end of relay models


.subckt RELAY_DPDT_BHV coila coilb no1 nc1 com1	no2 nc2 com2
+ PARAMS:
+ T_make = 20mSec  ; Time for contact to close when current is turned off/on
+ T_break= 10mSec  ; Time for contact to open when current is turned off/on
+ I_pull = 35ma    ; Pull-in current
+ I_drop = 25ma    ; Drop-out current
+ R_coil = 100     ; Coil resistance
+ L_coil = 5mH     ; Coil inductance
+ R_open = 100MEG  ; open circuit contact resistance
+ R_close= .05     ; closed circuit contact resistance
+ Contact_match = .95 ; matching of contact make/break/bounce times: 1 = exact

* electrical model of coil
v_winding coila  a1     0
r_winding a1     a2     {R_coil}
l_winding a2     coilb  {L_coil}

* make a voltage from the current

e_cc  cc 0 value = {limit(I(v_winding),-3*I_pull,3*I_pull)}
r_cc  cc 0 1k

* use digital to create a switch with hysteresis

o_mag  cc 0 relay_1 DGTLNET=d digio_1

* by using min/max delay we can use a single N-device to simulate both
* the no and nc contacts.

u_dly1  buf dpwr dgnd d cnt1 relay_2a digio_1 MNTYMXDLY=4
u_dly2  buf dpwr dgnd d cnt2 relay_2b digio_1 MNTYMXDLY=4
n_cnt1  com1 no1 nc1 relay_3 DGTLNET=cnt1 digio_1
n_cnt2  com2 no2 nc2 relay_3 DGTLNET=cnt2 digio_1

.model relay_1 doutput (
+ s0name="0" s0vlo={-I_pull}   s0vhi={I_pull}
+ s1name="1" s1vlo={I_drop}    s1vhi={4*I_pull}
+ s2name="1" s2vlo={-4*I_pull} s2vhi={-I_drop}
+ timestep={T_make/1000}
+ )
.model relay_2a ugate (
+ tplhmn={T_break}   tphlmn={T_break}
+ tplhmx={T_make}      tphlmx={T_make}
+ )
.model relay_2b ugate (
+ tplhmn={T_break*Contact_match}   tphlmn={T_break*Contact_match}
+ tplhmx={T_make*Contact_match}    tphlmx={T_make*Contact_match}
+ )
.model relay_3 dinput (
+ s0name="0" s0tsw={T_make/1000} s0rlo={R_open}  s0rhi={R_close}
+ s1name="1" s1tsw={T_make/1000} s1rlo={R_close} s1rhi={R_open}
+ s2name="R" s2tsw={T_make/1000} s2rlo={R_open}  s2rhi={R_open}    
+ s3name="F" s3tsw={T_make/1000} s3rlo={R_open}  s3rhi={R_open}    
+ s4name="X" s4tsw={T_make/1000} s4rlo={R_open}  s4rhi={R_open}    
+ s5name="Z" s5tsw={T_make/1000} s5rlo={R_open}  s5rhi={R_open}    
+ )
.model digio_1 uio

.ends
*$
* End of RELAY_DPDT_BHV model


* Behavioral model of a relay with contact bounce.

.subckt RELAY_SPDT_BHV_BOUNCE coila coilb no nc com
+ PARAMS:
+ T_make = 20mSec  ; Time for contact to close when current is turned off/on
+ T_break= 10mSec  ; Time for contact to open when current is turned off/on
+ T_bounce=5mSec   ; bounce time (after T_make)
+ I_pull = 35ma    ; Pull-in current
+ I_drop = 25ma    ; Drop-out current
+ R_coil = 100     ; Coil resistance
+ L_coil = 5mH     ; Coil inductance
+ R_open = 100MEG  ; open circuit contact resistance
+ R_close= .05     ; closed circuit contact resistance

* electrical model of coil
v_winding coila  a1     0
r_winding a1     a2     {R_coil}
l_winding a2     coilb  {L_coil}

* make a voltage from the current

e_cc  cc 0 value = {limit(I(v_winding),-3*I_pull,3*I_pull)}
r_cc  cc 0 1k

* use digital to create a switch with hysteresis

o_mag  cc 0 relay_1 DGTLNET=d digio_1
u_dly  buf dpwr dgnd d cn_no relay_2 digio_1
u_inv  inv dpwr dgnd d cn_nc relay_2 digio_1
* model contact bounce with subckt
x_no   cn_no com no RELAY_CONTACT_BOUNCE
+ PARAMS:
+ T_make =  {T_make}
+ T_break=  {T_break}
+ T_bounce= {T_bounce}
+ R_open =  {R_open}
+ R_close=  {R_close}
x_nc   cn_nc com nc RELAY_CONTACT_BOUNCE
+ PARAMS:
+ T_make =  {T_make}
+ T_break=  {T_break}
+ T_bounce= {T_bounce}
+ R_open =  {R_open}
+ R_close=  {R_close}


.model relay_1 doutput (
+ s0name="0" s0vlo={-I_pull}   s0vhi={I_pull}
+ s1name="1" s1vlo={I_drop}    s1vhi={4*I_pull}
+ s2name="1" s2vlo={-4*I_pull} s2vhi={-I_drop}
+ timestep={T_make/1000}
+ )
.model relay_2 ugate (
+ tphlmn={T_break}   tphlmx={T_break}
+ tplhmn={T_make-0.126*T_bounce}      tplhmx={T_make-0.126*T_bounce}
+ )
.model digio_1 uio

.ends
*$
* End of RELAY_SPDT_BHV_BOUNCE model


* Behavioral model of a relay. (No contact bounce)

.subckt RELAY_SPDT_BHV coila coilb no nc com
+ PARAMS:
+ T_make = 20mSec  ; Time for contact to close when current is turned off/on
+ T_break= 10mSec  ; Time for contact to open when current is turned off/on
+ I_pull = 35ma    ; Pull-in current
+ I_drop = 25ma    ; Drop-out current
+ R_coil = 100     ; Coil resistance
+ L_coil = 5mH     ; Coil inductance
+ R_open = 100MEG  ; open circuit contact resistance
+ R_close= .05     ; closed circuit contact resistance

* electrical model of coil
v_winding coila  a1     0
r_winding a1     a2     {R_coil}
l_winding a2     coilb  {L_coil}

* make a voltage from the current

e_cc  cc 0 value = {limit(I(v_winding),-3*I_pull,3*I_pull)}
r_cc  cc 0 1k

* use digital to create a switch with hysteresis

o_mag  cc 0 relay_1 DGTLNET=d digio_1

* by using min/max delay we can use a single N-device to simulate both
* the no and nc contacts.

u_dly  buf dpwr dgnd d cnt relay_2 digio_1 MNTYMXDLY=4
n_cnt  com no nc relay_3 DGTLNET=cnt digio_1

.model relay_1 doutput (
+ s0name="0" s0vlo={-I_pull}   s0vhi={I_pull}
+ s1name="1" s1vlo={I_drop}    s1vhi={4*I_pull}
+ s2name="1" s2vlo={-4*I_pull} s2vhi={-I_drop}
+ timestep={T_make/1000}
+ )
.model relay_2 ugate (
+ tplhmn={T_break}   tphlmn={T_break}
+ tplhmx={T_make}      tphlmx={T_make}
+ )
.model relay_3 dinput (
+ s0name="0" s0tsw={T_make/1000} s0rlo={R_open}  s0rhi={R_close}
+ s1name="1" s1tsw={T_make/1000} s1rlo={R_close} s1rhi={R_open}
+ s2name="R" s2tsw={T_make/1000} s2rlo={R_open}  s2rhi={R_open}    
+ s3name="F" s3tsw={T_make/1000} s3rlo={R_open}  s3rhi={R_open}    
+ s4name="X" s4tsw={T_make/1000} s4rlo={R_open}  s4rhi={R_open}    
+ s5name="Z" s5tsw={T_make/1000} s5rlo={R_open}  s5rhi={R_open}    
+ )
.model digio_1 uio

.ends
*$
* End of RELAY_SPDT_BHV model

* End of mix_misc library
